syntax = "proto3";

package mapreduce;

option go_package = "./;proto";

enum TaskType {
  MAP = 0;
  REDUCE = 1;
}

enum TaskStatus {
  PENDING = 0;
  IN_PROGRESS = 1;
  COMPLETED = 2;
  FAILED = 3;
}

message Task {
  string task_id = 1;
  TaskType type = 2;
  TaskStatus status = 3;
  repeated string input_files = 4;
  string output_dir = 5;
  int32 reduce_task_num = 6; // for reduce tasks which reduce partition
  int32 num_reduce_task = 7; // Total number of reduce tasks
  int64 assigned_at = 8;
}

message RegisterWorkerRequest {
  string worker_id = 1;
  string worker_address = 2;
}

message RegisterWorkerResponse {
  bool success = 1;
  string msg = 2;
}

message GetTaskRequest {
  string worker_id = 1;
}

message GetTaskResponse {
  bool has_task = 1;
  Task task = 2;
  bool job_complete = 3;
}

message TaskCompleteRequest {
  string worker_id = 1;
  string task_id = 2;
  bool success = 3;
  string error_msg = 4;
  repeated string output_files = 5;
}

message TaskCompleteResponse {
  bool success = 1;
}

message HeartbeatRequest {
  string worker_id = 1;
  TaskStatus current_task_status = 2;
  string current_task_id = 3;
}

message HeartbeatResponse {
  bool keep_alive = 1;
}

message SubmitJobRequest {
  string job_id = 1;
  repeated string input_files = 2;
  string out_dir = 3;
  int32 num_reduce_tasks = 4;
  string map_function = 5;
  string reduce_function = 6;
}

message SubmitJobResponse {
  bool accepted = 1;
  string msg = 2;
  string job_id = 3;
}

message JobStatusRequest {
  string job_id = 1;
}

message JobStatusResponse {
  string job_id = 1;
  string status = 2; // "pending", "running", "completed", "failed"
  int32 total_tasks = 3;
  int32 completed_tasks = 4;
  int32 failed_tasks = 5;
  repeated string output_files = 6;
}

service MasterService {
  rpc RegisterWorker(RegisterWorkerRequest) returns(RegisterWorkerResponse);
  rpc GetTask(GetTaskRequest) returns (GetTaskResponse);
  rpc CompleteTask(TaskCompleteRequest) returns (TaskCompleteResponse);
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  
  rpc SubmitJob(SubmitJobRequest) returns (SubmitJobResponse);
  rpc GetJobStatus(JobStatusRequest) returns (JobStatusResponse);
}

service WorkerService {
  rpc Ping(PingRequest) returns (PingResponse);
}

// Simple ping for worker health checks
message PingRequest {
  string message = 1;
}

message PingResponse {
  string message = 1;
  int64 timestamp = 2;
}


